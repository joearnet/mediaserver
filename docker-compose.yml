version: '3.7'
services:

    # https://hub.docker.com/r/plexinc/pms-docker
    plex:
        container_name: plex
        image: plexinc/pms-docker:latest
        restart: unless-stopped
        environment:
            PLEX_UID: '${PUID}'
            PLEX_GID: '${PGID}'
            TZ: '${TZ}'
            PLEX_CLAIM: '${PLEX_CLAIM}'
            ADVERTISE_IP: '${ADVERTISE_IP}'
        networks:
            - traefik
        ports:
            - '32400:32400/tcp'
        volumes:
          - 'plex:/config:rw' 
          - '${MEDIA_DIR}:/media'
          - '/tmp:/tmp'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.plex.entrypoints: https
            traefik.http.routers.plex.tls.certresolver: tlschallenge
            traefik.http.routers.plex.rule: Host(`plex.${ACME_DOMAIN}`) || Host(`${ACME_DOMAIN}`)
            traefik.http.services.plex_mediaserver.loadbalancer.server.port: 32400
            traefik.http.services.plex_mediaserver.loadbalancer.server.scheme: http

    # https://hub.docker.com/r/linuxserver/nzbget/
    nzbget:
        container_name: nzbget
        image: linuxserver/nzbget:latest
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - 'nzbget:/config:rw'
            - '${DOWNLOADS_DIR}:/downloads'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.nzbget.entrypoints: https
            traefik.http.routers.nzbget.tls.certresolver: tlschallenge
            traefik.http.routers.nzbget.rule: Host(`nzbget.${ACME_DOMAIN}`)

    # https://hub.docker.com/r/linuxserver/sonarr/
    sonarr:
        container_name: sonarr
        image: linuxserver/sonarr:latest
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - 'sonarr:/config:rw'
            - '${DOWNLOADS_DIR}:/downloads'
            - '${MEDIA_DIR}:/media'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.sonarr.entrypoints: https
            traefik.http.routers.sonarr.tls.certresolver: tlschallenge
            traefik.http.routers.sonarr.rule: Host(`sonarr.${ACME_DOMAIN}`)
        links:
            - hydra
            - nzbget

    # https://hub.docker.com/r/linuxserver/radarr/
    radarr:
        container_name: radarr
        image: linuxserver/radarr:preview
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - 'radarr:/config:rw'
            - '${DOWNLOADS_DIR}:/downloads'
            - '${MEDIA_DIR}:/media'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.radarr.entrypoints: https
            traefik.http.routers.radarr.tls.certresolver: tlschallenge
            traefik.http.routers.radarr.rule: Host(`radarr.${ACME_DOMAIN}`)
        links:
            - hydra
            - nzbget

    # https://hub.docker.com/r/linuxserver/hydra2/
    hydra:
        container_name: hydra
        image: linuxserver/hydra2:latest
        restart: unless-stopped
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        networks:
            - traefik
        volumes:
            - 'hydra:/config:rw'
            - '${DOWNLOADS_DIR}:/downloads'
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.hydra.entrypoints: https
            traefik.http.routers.hydra.tls.certresolver: tlschallenge
            traefik.http.routers.hydra.rule: Host(`hydra.${ACME_DOMAIN}`)

    # https://hub.docker.com/_/traefik/
    traefik:
        container_name: traefik
        image: traefik:v2.1.0-rc2
        restart: unless-stopped
        environment:
            CF_API_EMAIL: '${CF_API_EMAIL}'
            CF_API_KEY: '${CF_API_KEY}'
        environment:
            TZ: '${TZ}'
        networks:
            - traefik
        ports:
            - '80:80/tcp'
            - '8080:8080/tcp'
            - '443:443/tcp'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
            - 'traefik:/etc/traefik:rw'
        command:
            - "--log.level=INFO"
            - "--api=true"
            - "--global.sendanonymoususage=false"
            - "--api.insecure"
            - "--serverstransport.insecureskipverify"
            - "--entrypoints.http.address=:80"
            - "--entrypoints.https.address=:443"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--certificatesResolvers.tlschallenge.acme.tlschallenge=true"
            - "--certificatesresolvers.tlschallenge.acme.storage=/etc/traefik/acme.json"
            - "--certificatesresolvers.tlschallenge.acme.email=${ACME_EMAIL}"
            # - "--certificatesresolvers.tlschallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.traefik.entrypoints: https
            traefik.http.routers.traefik.tls: true
            traefik.http.routers.traefik.tls.certresolver: cloudflare
            traefik.http.routers.traefik.tls.domains[0].main: 'arnets.net'
            traefik.http.routers.traefik.tls.domains[0].sans: '*.arnets.net'
            traefik.http.routers.traefik-secure.service: api@internal
            traefik.http.routers.traefik.rule: Host(`traefik.${ACME_DOMAIN}`)
            traefik.http.routers.traefik.middlewares: secureheaders, basicauth
            traefik.http.routers.traefik.service: api@internal
            traefik.http.routers.http.entrypoints: http
            traefik.http.routers.http.rule: HostRegexp(`${ACME_DOMAIN}`, `{subdomain:[a-z]+}.${ACME_DOMAIN}`)
            traefik.http.routers.http.middlewares: redirectscheme
            traefik.http.middlewares.redirectscheme.redirectscheme.scheme: https
            traefik.http.middlewares.basicauth.basicauth.users: ${HTPASSWD}
            traefik.http.middlewares.secureheaders.headers.stsSeconds: 15552000
            traefik.http.middlewares.secureheaders.headers.framedeny: true
            traefik.http.middlewares.secureheaders.headers.sslForceHost: true
            traefik.http.middlewares.secureheaders.headers.sslRedirect: true
            traefik.http.middlewares.secureheaders.headers.stsIncludeSubdomains: true
            traefik.http.middlewares.secureheaders.headers.browserXssFilter: true
            traefik.http.middlewares.secureheaders.headers.contentTypeNosniff: true
            traefik.http.middlewares.secureheaders.headers.forceSTSHeader: true
            traefik.http.middlewares.secureheaders.headers.stsPreload: true
            traefik.http.middlewares.secureheaders.headers.customResponseHeaders.X-Robots-Tag: none
            traefik.http.middlewares.secureheaders.headers.customFrameOptionsValue: SAMEORIGIN

    unifi:
        image: linuxserver/unifi-controller
        container_name: unifi
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            MEM_LIMIT: '1024M' #optional
            TZ: '${TZ}'
        volumes:
            - 'unifi:/config:rw'
        networks:
            - traefik
        restart: unless-stopped
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.unifi.entrypoints: https
            traefik.http.routers.unifi.tls.certresolver: tlschallenge
            traefik.http.routers.unifi.rule: Host(`unifi.${ACME_DOMAIN}`)

    headphones:
        image: linuxserver/headphones
        container_name: headphones
        environment:
            PUID: '${PUID}'
            PGID: '${PGID}'
            TZ: '${TZ}'
        volumes:
            - 'headphones:/config:rw'
            - '${DOWNLOADS_DIR}:/downloads'
            - '${MEDIA_DIR}:/media/music'
        networks:
            - traefik
        restart: unless-stopped
        labels:
            traefik.enable: true
            traefik.docker.network: traefik
            traefik.http.routers.headphones.entrypoints: https
            traefik.http.routers.headphones.tls.certresolver: tlschallenge
            traefik.http.routers.headphones.rule: Host(`headphones.${ACME_DOMAIN}`)


networks:
    traefik:
        name: traefik
        attachable: true

volumes:
    traefik:
    hydra:
    nzbget:
    plex:
    sonarr:
    radarr:
    unifi:
    headphones: